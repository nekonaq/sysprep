#!/bin/sh
set -e +x
COPYING="$( cat <<'EOF'
Copyright 2024 tnak@nekonaq.com
License Apache 2.0: <http://www.apache.org/licenses/LICENSE-2.0>
EOF
)"
prog="${0##*/}"
run="${PT__noop:+: }"
show=

RCSID='$Id: set-password,v 1.1 2024/01/18 02:38:06 nak Exp nak $'

usage() {
  cat <<EOF
Usage:
  $prog [--lock] USER PASSWORD
  $prog [--lock|--unlock] USER
  $prog --disable USER

  システム・アカウントのパスワード情報を設定する。

Options:
  -l, --lock           パスワードをロックする。
  -u, --ulock          パスワードをアンロックする。
  -d, --disable        パスワードを無効にする。
  -h, --help           このヘルプを表示する。
  --version            プログラムのバージョンを表示する。

Description:
  1番目の形式は USER のパスワードを PASSWORD にする。 オプション --lock を付けるとロックされ
  たパスワードになる。

  2番目の形式は USER のパスワードをロックまたはアンロックする。パスワードは変更しない。

  3番目の形式は USER のパスワードを無効にする。

  NOTE: 次のハッシュ・アルゴリズムには対応していない。
  descrypt bigcrypt bsdicrypt SunMD5

EOF
}

print_version() {
  local version="$( echo "$RCSID" | awk '{ print $3, gensub(/\//, "-", "g", $4)}' )"
  if [ -z "${version# }" ]; then
    version="wip-$( date -Id -r "$0" )"
  fi
  echo "$prog $version\n$COPYING"
}

ensure_root() {
  if [ "$( id -u )" != 0 ]; then
    echo "$prog: You must be a root." >&2
    return 1
  fi
}

check_disabled() {
  local pwcur="$1"
  [ "$pwcur" = '*' ]
}

check_locked() {
  local pwcur="$1"
  case "$pwcur" in
    \!*)
      return 0
      ;;
  esac
  return 1
}

pwstr_crypted() {
  local pwstr="$1"
  echo "$pwstr" | grep -q '^$[0-9a-z]\+\$'
  # echo "$pwstr" |sed -n '\|^!\?\$[0-9a-z]\$|{s|^!||; p}'
}

pwstr_eq() {
  local pwcur="$1" pwnew="$2"
  python3 -c '
import sys, crypt
pwcur = '"'$pwcur'"'
pwnew = '"'$pwnew'"'
result = (lambda pwcur_hash: crypt.crypt(pwnew, pwcur_hash) == pwcur_hash)(pwcur[1:] if pwcur.startswith("!") else pwcur)
sys.exit(not result)
'
}

notice_required() {
  return 1
}

show_required() {
  echo ": $@" >&2
}

update__disable() {
  local user="$1"
  echo "$user:*" | (
    set -x
    ${run}/sbin/chpasswd -e "# user=$user disable"
  )
}

update__unlock() {
  local user="$1"
  ( set -x
    ${run}/bin/passwd --unlock "$user"
  )
}

update__lock() {
  local user="$1"
  ( set -x
    ${run}/bin/passwd --lock "$user"
  )
}

update__set_pwenc() {
  local user="$1" pwenc="$2"
  echo "$user:$pwenc" | (
    set -x
    ${run}/sbin/chpasswd -e "# user=$user"
  )
}

update__set_pwstr() {
  local user="$1" pwstr="$2"
  echo "$user:$pwstr" | (
    set -x
    ${run}/sbin/chpasswd "# user=$user"
  )
}

update_required() {
  local target="$1"
  shift
  "update__$target" "$@"
}

password_proc() {
  local opts="$1" user="$2" pwnew="$3"
  local on_change="${4:-notice_required}"

  local shadowent="$( getent shadow "$user" )"
  if [ -z "$shadowent" ]; then
    echo "$prog: no user exists: $user" >&2
    return 1
  fi
  local pwcur="$( echo "$shadowent" | cut -d: -f2 )"

  # disable
  case "$opts" in
    *:disable:*)
      check_disabled "$pwcur" && return 0
      "$on_change" disable "$user"
      return
      ;;
  esac

  if [ -n "$pwnew" ]; then
    if pwstr_crypted "$pwnew"; then
      # pwnew is crypted text
      local pwenc
      case "$opts" in
        *:lock:*)
          pwenc="!$pwnew"
          ;;
        *)
          pwenc="$pwnew"
          ;;
      esac

      if [ "$pwcur" != "$pwenc" ]; then
        "$on_change" set_pwenc "$user" "$pwenc"
      fi
      return
    fi

    # pwnew is plain text
    if ! pwstr_eq "$pwcur" "$pwnew"; then
      "$on_change" set_pwstr "$user" "$pwnew"

      case "$opts" in
        *:lock:*)
          "$on_change" lock "$user"
          ;;
      esac
      return
    else
      # pwnew が plain text で、かつパスワード変更の必要がない場合、オプション --lock を指定
      # していなければ、オプション --unlock を指定したものとして扱う。
      opts="$opts:unlock:"
    fi
  fi

  check_disabled "$pwcur" && return 0
  case "$opts" in
    *:lock:*)
      check_locked "$pwcur" && return 0
      "$on_change" lock "$user"
      return
      ;;
    *:unlock:*)
      check_locked "$pwcur" || return 0
      "$on_change" unlock "$user"
      return
      ;;
  esac
}

password__test() {
  password_proc "$@"
}

password__show() {
  password_proc "$@" show_required
}

password__update() {
  password_proc "$@" update_required
}

main() {
  if [ -n "$PT__task" ]; then
    exec 2>&1
    set -- \
        ${PT_disable:+--disable} \
        ${PT_lock:+--lock} \
        ${PT_unlock:+--unlock} \
        "$PT_user" \
        "$PT_password" \
    ;

    local epp_arg='<%= $op %>'
    case "$epp_arg" in
      \<*) ;;
      *) PT_op="$epp_arg";;
    esac
  fi

  ARGS=$( getopt --name $prog --long help,version,dry-run,test,show,disable,lock,unlock --options hdlu -- "$@" )
  if [ $? != 0 ]; then
    echo "$prog: getopt error occured: $?" >&2
    exit 2
  fi
  eval set -- "$ARGS"

  local op="${PT_op:-update}" opts
  while [ $# -gt 0 ]; do
    case "$1" in
      -h|--help)
        usage
        return
        ;;
      --version)
        print_version
        return
        ;;
      --test)
        op=test
        ;;
      --show)
        op=show
        ;;
      --dry-run)
        run=': '
        ;;
      -d|--disable)
        opts="$opts:disable:"
        ;;
      -l|--lock)
        opts="$opts:lock:"
        ;;
      -u|--unlock)
        opts="$opts:unlock:"
        ;;
      --)
        shift
        break
        ;;
    esac
    shift
  done

  local user="$1"
  local pwnew="$2"
  if [ -z "$user" ]; then
    usage
    return 1
  fi

  ${run}ensure_root
  "password__$op" "$opts" "$user" "$pwnew" 
}

main "$@"

# Local Variables:
# fill-column: 84
# End:
